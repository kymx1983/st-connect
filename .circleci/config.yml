version: 2.1
jobs:
  build:    
    docker:
    - image: circleci/ruby:2.5.1-node-browsers # ruby2.5.1を利用していたため
      environment:
        RAILS_ENV: test
    - image: circleci/mysql:5.6.46-ram
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: true
        MYSQL_USER: root
        MYSQL_DATABASE: circleci-example-for-rails_test
        MYSQL_ROOT_HOST: '%'
        MYSQL_PORT: 3306
        BUNDLER_VERSION: 2.0.2

    working_directory: ~/st-connect # 処理を実行するディレクトリ
    
    steps: # コンテナ内で実行される処理一覧,jobsを定義する場合stepsも必須,ないとエラー発生
    - checkout
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "Gemfile.lock" }}
        - v1-dependencies-
    - run:
        name: setup bundler
        command: |
          rm Gemfile.lock
          gem update --system
          gem install bundler
    - run:
        name: install dependencies
        command: |
          bundle install --jobs=4 --retry=3 --path vendor/bundle
    - save_cache:
        paths:
        - ./vendor/bundle
        key: v1-dependencies-{{ checksum "Gemfile.lock" }}
    # Database setup
    - run: mv config/database.yml.ci config/database.yml
    - run: bundle exec rails db:create
    - run: bundle exec rails db:schema:load
    # run tests!
    - run:
        name: Run rspec
        command: |
          mkdir /tmp/test-results
          TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
          # bundle exec rspec --format progress --color --format documentation
          bundle exec rspec
    # collect reports
    - store_test_results:
        path: /tmp/test-results
    - store_artifacts:
        path: /tmp/test-results
        destination: test-results
    # circleciからSecurityGroupへのアクセス許可
    # - run: sudo pip install awscli
    - run:
        name: "authorize-security-group-ingress"
        command: |
          IP=`curl -s ifconfig.me`
          echo "#!/bin/bash" > ./sg.sh
          echo "aws configure set region ap-northeast-1" >> ./sg.sh
          echo "aws ec2 authorize-security-group-ingress --group-id sg-02a9b1c9db84fa2db --protocol tcp --port 22 --cidr ${IP}/32" >> ./sg.sh
          bash ./sg.sh
    # deploy
    - add_ssh_keys:
        fingerprints:
          - "94:a9:a2:fb:ad:c9:54:73:62:c0:70:ca:a9:d7:18:5f"
    - deploy:
        name: Capistrano deploy
        command: |
          if [ "${CIRCLE_BRANCH}" != "master" ]; then
            exit 0
          fi
          bundle exec cap production deploy
          